{- Project Euler
Problem 12
==========


   The sequence of triangle numbers is generated by adding the natural
   numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
   28. The first ten terms would be:

                    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

   Let us list the factors of the first seven triangle numbers:

      1: 1
      3: 1,3
      6: 1,2,3,6
     10: 1,2,5,10
     15: 1,3,5,15
     21: 1,3,7,21
     28: 1,2,4,7,14,28

   We can see that 28 is the first triangle number to have over five
   divisors.

   What is the value of the first triangle number to have over five hundred
   divisors?


   Answer: 8091de7d285989bbfa9a2f9f3bdcc7c0
-}

import           Data.HashMap
import           Data.List
import           Helpers      (prime_factorize)


combinations 0 lst = [[]]
combinations n lst = do
  (x:xs) <- tails lst
  rest   <- combinations (n-1) xs
  return $ x : rest


total :: [Int] -> Int
total xs = sum [sum [product j | j <- (combinations i xs)] | i <- [1..l]]
  where
    l = length xs

-- Construct hashmap of factor counts
enumerate :: [Int] -> [Int]
enumerate xs = elems $ foldl aggregate init xs
  where
    update old new = old + new
    aggregate :: Map Int Int -> Int -> Map Int Int
    aggregate m el = insertWith update el 1 m
    init :: Map Int Int
    init = empty

triangles :: [Int]
triangles = 1: next triangles 1 1
    where
      next _  1 1 = 3: next triangles 3 2
      next xs prev n = nth: next xs nth (n + 1)
        where
          nth = prev + n + 1


factorCount :: [Int]
factorCount = [t | t <- triangles, let count = total $ enumerate $ prime_factorize t, count > 500]

main :: IO ()
main = print $ head factorCount
